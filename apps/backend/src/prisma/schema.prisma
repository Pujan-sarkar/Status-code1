generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  name              String
  phone             String          @unique
  isVerified        Boolean         @default(false)
  image             String?
  location          String?
  password          String
  profiles          Profile[]
  jobPosts          JobPost[]
  petPosts          PetsPost[]
  wastePosts        WastePosts[]    
  donationPosts     DonationPosts[]
  orders            Order[]
  OTPs              OTP[]
  isProfileComplete Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Profile {
  id          String   @id @default(uuid())
  userId      String
  service     Service  @default(USER)
  user        User     @relation(fields: [userId], references: [id])
  description String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JobPost {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  jobType        Service  @default(USER)
  jobDescription String?
  published      Boolean  @default(false)
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String
  location       String
  status         Status   @default(PENDING)
  fixerId        String?
}

model PetsPost {
  id        String   @id @default(uuid())
  petType   Pet      @default(OTHERS)
  petImage  String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  location  String
  status    Status   @default(PENDING)
  fixerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DonationPosts {
  id            String   @id @default(uuid())
  donationType  Pet      @default(OTHERS)
  donationImage String?
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  location      String
  status        Status   @default(PENDING)
  fixerId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OTP {
  id        String   @id @default(uuid())
  otp       String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '10 minutes'"))
  updatedAt DateTime @updatedAt
}

model WastePosts {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  wasteImage  String?
  price       Float    
  views       Int      @default(0)
  orders      Order[]
  status      Status   @default(PENDING)
  lat         Float?
  long        Float?
}

model Order {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  wastePost   WastePosts @relation(fields: [wastePostId], references: [id])
  wastePostId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  quantity    Int
  totalPrice  Float     
  status      Status     @default(PENDING)
}

enum Status {
  COMPLETE
  PENDING
}

enum Service {
  CARPENTER
  PLUMBER
  ELECTRICIAN
  CHARITY
  USER
  OTHERS
}

enum Pet {
  CAT
  DOG
  OTHERS
}

enum Donation {
  FOOD
  BOOKS
  CLOTHES
  OTHERS
}
